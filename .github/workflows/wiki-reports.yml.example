name: Publish Test Reports to Wiki

on:
  push:
    branches: [ "main", "release/*" ]
  workflow_run:
    workflows: ["CI"]
    types: [completed]

permissions:
  contents: write   # for Wiki push
  actions: read

jobs:
  publish-reports:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build wiki-reports package
        run: pnpm --filter @ts-template/wiki-reports build

      # Generate test reports (example for different formats)
      - name: Run tests with reporters
        run: |
          # Run Vitest with JSON reporter
          pnpm test -- --reporter=json --outputFile=reports/vitest-report.json || true

          # Run Cucumber tests
          pnpm test:cucumber || true

          # Create reports directory
          mkdir -p reports

      - name: Download artifacts from CI workflow
        if: github.event_name == 'workflow_run'
        uses: actions/download-artifact@v4
        with:
          name: test-reports
          path: reports
        continue-on-error: true

      - name: Convert test reports to HTML
        run: |
          # Create a simple conversion script
          cat > convert-reports.js << 'EOF'
          const { WikiReportsPublisher, JUnitConverter, VitestConverter, CucumberConverter } = require('./packages/wiki-reports/dist/index.js');
          const fs = require('fs').promises;
          const path = require('path');

          async function convertReports() {
            const reportsDir = 'reports';
            const outputDir = 'reports-html';

            await fs.mkdir(outputDir, { recursive: true });

            // Convert JUnit XML if exists
            try {
              const junitConverter = new JUnitConverter();
              if (await fs.access(path.join(reportsDir, 'junit.xml')).then(() => true).catch(() => false)) {
                await junitConverter.convert({
                  inputPath: path.join(reportsDir, 'junit.xml'),
                  outputPath: path.join(outputDir, 'junit.html'),
                  format: 'junit',
                  metadata: {
                    branch: process.env.GITHUB_REF_NAME,
                    commit: process.env.GITHUB_SHA,
                    timestamp: new Date().toISOString()
                  }
                });
              }
            } catch (e) {
              console.log('No JUnit reports to convert');
            }

            // Convert Vitest JSON if exists
            try {
              const vitestConverter = new VitestConverter();
              if (await fs.access(path.join(reportsDir, 'vitest-report.json')).then(() => true).catch(() => false)) {
                await vitestConverter.convert({
                  inputPath: path.join(reportsDir, 'vitest-report.json'),
                  outputPath: path.join(outputDir, 'vitest.html'),
                  format: 'vitest',
                  metadata: {
                    branch: process.env.GITHUB_REF_NAME,
                    commit: process.env.GITHUB_SHA,
                    timestamp: new Date().toISOString()
                  }
                });
              }
            } catch (e) {
              console.log('No Vitest reports to convert');
            }

            // Create index.html
            const indexHtml = `
            <!DOCTYPE html>
            <html>
            <head>
                <title>Test Reports - Run ${process.env.GITHUB_RUN_ID}</title>
                <style>
                    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; padding: 40px; background: #f5f5f5; }
                    .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                    h1 { color: #333; }
                    .metadata { background: #f8f9fa; padding: 15px; border-radius: 4px; margin: 20px 0; }
                    .reports-list { list-style: none; padding: 0; }
                    .reports-list li { padding: 10px; border-bottom: 1px solid #e9ecef; }
                    .reports-list a { color: #007bff; text-decoration: none; font-weight: 500; }
                    .reports-list a:hover { text-decoration: underline; }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>Test Reports</h1>
                    <div class="metadata">
                        <p><strong>Branch:</strong> ${process.env.GITHUB_REF_NAME}</p>
                        <p><strong>Run ID:</strong> ${process.env.GITHUB_RUN_ID}</p>
                        <p><strong>Commit:</strong> ${process.env.GITHUB_SHA}</p>
                        <p><strong>Timestamp:</strong> ${new Date().toISOString()}</p>
                    </div>
                    <h2>Available Reports</h2>
                    <ul class="reports-list">
                        <li><a href="junit.html">JUnit Test Report</a></li>
                        <li><a href="vitest.html">Vitest Test Report</a></li>
                        <li><a href="cucumber.html">Cucumber Test Report</a></li>
                    </ul>
                </div>
            </body>
            </html>`;

            await fs.writeFile(path.join(outputDir, 'index.html'), indexHtml);
            console.log('Reports converted successfully');
          }

          convertReports().catch(console.error);
          EOF

          node convert-reports.js

      - name: Clone Wiki
        run: |
          git config --global user.email "bot@users.noreply.github.com"
          git config --global user.name "ci-bot"
          git clone "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.wiki.git" wiki
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish reports to Wiki
        run: |
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
          TARGET="wiki/reports/${BRANCH}/${GITHUB_RUN_ID}"

          # Create target directory
          mkdir -p "$TARGET"

          # Copy HTML reports
          if [ -d "reports-html" ]; then
            cp -r reports-html/* "$TARGET/"
          else
            echo "<html><body><h1>No reports available</h1></body></html>" > "$TARGET/index.html"
          fi

          # Save metadata
          cat > "$TARGET/metadata.json" << EOF
          {
            "branch": "${BRANCH}",
            "runId": "${GITHUB_RUN_ID}",
            "commitSha": "${GITHUB_SHA}",
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "repository": "${GITHUB_REPOSITORY}"
          }
          EOF

          # Update Wiki index
          node -e "
          const fs = require('fs');
          const path = require('path');

          const wikiPath = 'wiki';
          const branch = '${BRANCH}';
          const runId = '${GITHUB_RUN_ID}';
          const commitSha = '${GITHUB_SHA}'.substring(0, 7);
          const timestamp = new Date().toISOString();

          // Create Home.md content
          const latestRun = \`## Latest Test Report

          - **Branch:** \${branch}
          - **Run:** [\${runId}](reports/\${branch}/\${runId}/index.html)
          - **Commit:** \${commitSha}
          - **Time:** \${timestamp}
          \`;

          // Get history
          let history = [];
          const reportsPath = path.join(wikiPath, 'reports');

          try {
            const branches = fs.readdirSync(reportsPath);
            for (const b of branches) {
              const branchPath = path.join(reportsPath, b);
              if (!fs.statSync(branchPath).isDirectory()) continue;

              const runs = fs.readdirSync(branchPath).sort().reverse().slice(0, 10);
              for (const r of runs) {
                history.push(\`- \${b} / \${r} â†’ [Report](reports/\${b}/\${r}/index.html)\`);
              }
            }
          } catch (e) {
            console.log('No previous reports');
          }

          const homeContent = \`# Test Reports

          \${latestRun}

          ### History

          \${history.slice(0, 50).join('\\n') || 'No previous reports available.'}

          ---
          *Updated: \${timestamp}*
          \`;

          fs.writeFileSync(path.join(wikiPath, 'Home.md'), homeContent);
          console.log('Wiki index updated');
          "

          # Implement retention (keep only last 20 runs per branch)
          for BR in $(ls wiki/reports 2>/dev/null); do
            if [ -d "wiki/reports/$BR" ]; then
              KEEP=20
              ls -1dt wiki/reports/$BR/* | tail -n +$((KEEP+1)) | xargs -r rm -rf
            fi
          done

          # Push to Wiki
          cd wiki
          git add .
          git diff-index --quiet HEAD || git commit -m "Publish test reports: ${GITHUB_REF_NAME} run ${GITHUB_RUN_ID}"
          git push
          cd ..

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸ“Š Test reports have been published to the Wiki!\n\n[View Reports](https://github.com/${context.repo.owner}/${context.repo.repo}/wiki/reports/${process.env.GITHUB_HEAD_REF || process.env.GITHUB_REF_NAME}/${process.env.GITHUB_RUN_ID}/index.html)`
            })

      - name: Update status check
        if: always()
        run: |
          echo "Wiki reports publish status: ${{ job.status }}"