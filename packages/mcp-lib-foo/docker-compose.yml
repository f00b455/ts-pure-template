version: '3.8'

services:
  # Default HTTP transport service
  mcp-lib-foo-http:
    build:
      context: ../..
      dockerfile: packages/mcp-lib-foo/Dockerfile
      target: runner-network
    image: mcp-lib-foo:http
    container_name: mcp-lib-foo-http
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - MCP_SERVER_NAME=mcp-lib-foo
      - MCP_SERVER_VERSION=0.0.0
      - MCP_TRANSPORT=http
      - MCP_PORT=3000
      - MCP_HOST=0.0.0.0
      - MCP_CORS=true
      - MCP_HEALTH_PATH=/health
      - LOG_LEVEL=info
    ports:
      - "3010:3000"
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    labels:
      - "com.example.description=MCP Server for lib-foo (HTTP)"
      - "com.example.version=0.0.0"
      - "com.example.transport=http"

  # WebSocket transport service
  mcp-lib-foo-websocket:
    build:
      context: ../..
      dockerfile: packages/mcp-lib-foo/Dockerfile
      target: runner-network
    image: mcp-lib-foo:websocket
    container_name: mcp-lib-foo-websocket
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - MCP_SERVER_NAME=mcp-lib-foo
      - MCP_SERVER_VERSION=0.0.0
      - MCP_TRANSPORT=websocket
      - MCP_PORT=3001
      - MCP_HOST=0.0.0.0
      - LOG_LEVEL=info
    ports:
      - "3011:3001"
    networks:
      - mcp-network
    profiles:
      - websocket
    labels:
      - "com.example.description=MCP Server for lib-foo (WebSocket)"
      - "com.example.version=0.0.0"
      - "com.example.transport=websocket"

  # Stdio transport service (for traditional MCP usage)
  mcp-lib-foo-stdio:
    build:
      context: ../..
      dockerfile: packages/mcp-lib-foo/Dockerfile
      target: runner-stdio
    image: mcp-lib-foo:stdio
    container_name: mcp-lib-foo-stdio
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - MCP_SERVER_NAME=mcp-lib-foo
      - MCP_SERVER_VERSION=0.0.0
      - MCP_TRANSPORT=stdio
      - LOG_LEVEL=info
    networks:
      - mcp-network
    profiles:
      - stdio
    labels:
      - "com.example.description=MCP Server for lib-foo (STDIO)"
      - "com.example.version=0.0.0"
      - "com.example.transport=stdio"

  # Development service with mounted volumes
  mcp-lib-foo-dev:
    build:
      context: ../..
      dockerfile: packages/mcp-lib-foo/Dockerfile
      target: build
    container_name: mcp-lib-foo-dev
    command: ["pnpm", "dev"]
    environment:
      - NODE_ENV=development
      - MCP_SERVER_NAME=mcp-lib-foo
      - MCP_SERVER_VERSION=0.0.0
      - MCP_TRANSPORT=${MCP_TRANSPORT:-http}
      - MCP_PORT=${MCP_PORT:-3000}
      - MCP_HOST=${MCP_HOST:-0.0.0.0}
      - MCP_CORS=${MCP_CORS:-true}
      - LOG_LEVEL=debug
    ports:
      - "3012:3000"
    volumes:
      - ./src:/app/packages/mcp-lib-foo/src:ro
      - ./dist:/app/packages/mcp-lib-foo/dist
    networks:
      - mcp-network
    profiles:
      - dev

  # Test container for integration testing
  mcp-lib-foo-test:
    build:
      context: ../..
      dockerfile: packages/mcp-lib-foo/Dockerfile
      target: build
    container_name: mcp-lib-foo-test
    command: ["pnpm", "test"]
    environment:
      - NODE_ENV=test
      - MCP_TRANSPORT=http
      - MCP_PORT=3000
    volumes:
      - ./src:/app/packages/mcp-lib-foo/src:ro
      - ./features:/app/packages/mcp-lib-foo/features:ro
    networks:
      - mcp-network
    profiles:
      - test

networks:
  mcp-network:
    driver: bridge
    name: mcp-network

volumes:
  mcp-data:
    driver: local